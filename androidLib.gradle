apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply from: "${project.rootDir}/version.gradle"

android {
    compileSdkVersion parent.ext.compileSdkVersion
    buildToolsVersion parent.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion parent.ext.minSdkVersion
        targetSdkVersion parent.ext.targetSdkVersion

        consumerProguardFiles 'proguard-rules.pro'

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Reduce META-INF file conflicts
        kotlinOptions.freeCompilerArgs += ['-module-name', "${parent.ext.groupId}.${project.getName()}"]
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.getName()}-${project.version}.aar"
        }
    }
}

bintray {
    user = parent.ext.bintrayUser
    key = parent.ext.bintrayApiKey

    // jFrog plugin must be declared for this line to work
    configurations = ['archives']
    publications = ['lib']
    // Package info for BinTray
    pkg {
        repo = 'maven'
        name = 'android-extensions'
        userOrg = user
        licenses = ['MIT']
        vcsUrl = "${parent.ext.publishUrl}.git"
        version {
            name = project.version
            desc = 'An Android library to bootstrap an Android application.'
            vcsTag = 'vx1.0.0-alpha01'
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            lib(MavenPublication) {
                from components.release

                // Default to command line arg before reading from from version.gradle
                version = project.hasProperty('publish_version') ? "$publish_version" : project.version
                groupId parent.ext.groupId // from parent root.gradle ext
                artifactId project.getName()

                // Add sources too
                afterEvaluate {
                    artifact(sourcesJar) {
                        classifier = 'sources'
                        extension = 'jar'
                    }
                }
            }
        }
        repositories {
            maven {
                name = parent.ext.publishRepoName
                url = parent.ext.publishUrl
                credentials {
                    username = parent.ext.publishUserName
                    password = parent.ext.publishPassword
                }
            }
            parent.ext.publishRepositories.each { repo ->
                def props = (repo as ConfigObject).toProperties()
                maven {
                    name = props['name']
                    url = props['url']
                    credentials {
                        username = props['credentials.username']
                        password = props['credentials.password']
                    }
                }
            }
        }
    }
}

// Gradle task to generate sources after building a release aar
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn 'sourcesJar'
    }
}