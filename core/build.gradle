apply plugin: 'com.android.library'
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion parent.ext.compileSdkVersion
    buildToolsVersion parent.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion parent.ext.minSdkVersion
        targetSdkVersion parent.ext.targetSdkVersion

        consumerProguardFiles 'proguard-rules.pro'

        versionCode 6
        versionName parent.ext.libraryVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.getName()}-${parent.ext.libraryVersion}.aar"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation parent.ext.appCompat

    testImplementation 'junit:junit:4.12'

    androidTestImplementation project(':test')
    androidTestImplementation 'androidx.test:runner:1.1.0-beta02'
}

bintray {
    user = parent.ext.bintrayUser
    key = parent.ext.bintrayApiKey

    // jFrog plugin must be declared for this line to work
    configurations = ['archives']
    publications = ['lib']
    // Package info for BinTray
    pkg {
        repo = 'maven'
        name = 'android-bootstrap'
        userOrg = user
        licenses = ['MIT']
        vcsUrl = 'https://github.com/tunjid/android-bootstrap.git'
        version {
            name = '3.0.0'
            desc = 'An Android library to bootstrap an Android application.'
            vcsTag = '3.0.0'
        }
    }
}

publishing {
    publications {
        lib(MavenPublication) {
            version = parent.ext.libraryVersion
            groupId parent.ext.groupId
            artifactId project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-${version}.aar")

            // Add sources too
            artifact(sourcesJar) {
                classifier = 'sources'
                extension = 'jar'
            }

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url parent.ext.artifactoryUrl
        }
    }
}

// Gradle task to generate sources after building a release aar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn 'sourcesJar'
    }
}


