import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61'
        classpath 'com.android.tools.build:gradle:3.6.0-rc02'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
    project.ext {
        buildToolsVersion = "29.0.2"
        compileSdkVersion = 29
        targetSdkVersion = 29
        minSdkVersion = 21

        material = 'com.google.android.material:material:1.2.0-alpha02'
        palette = 'androidx.palette:palette:1.0.0'
        cardView = 'androidx.cardview:cardview:1.0.0'
        appCompat = 'androidx.appcompat:appcompat:1.1.0'
        viewpager2 = 'androidx.viewpager2:viewpager2:1.0.0'
        recyclerView = 'androidx.recyclerview:recyclerview:1.1.0'
        supportAnnotations = 'androidx.annotation:annotation:1.1.0'
        constraintLayout = 'androidx.constraintlayout:constraintlayout:1.1.3'
        swipeRefreshLayout = 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'

        savedState = 'androidx.savedstate:savedstate:1.0.0'

        lifecycleSavedState = 'androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0'
        lifecycleViewModel = 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'
        lifeCycleReactiveStreams = 'androidx.lifecycle:lifecycle-reactivestreams:2.2.0'

        fragment = 'androidx.fragment:fragment:1.2.0'
        fragmentKtx = 'androidx.fragment:fragment-ktx:1.2.0'

        dynamicAnimations = 'androidx.dynamicanimation:dynamicanimation:1.1.0-alpha02'
        dynamicAnimationsKtx = 'androidx.dynamicanimation:dynamicanimation-ktx:1.0.0-alpha02'

        testCore = 'androidx.test:core:1.2.0'

        mockitoCore = 'org.mockito:mockito-core:2.23.0'
        mockitoAndroid = 'org.mockito:mockito-android:2.23.0'

        espressoCore = 'androidx.test.espresso:espresso-core:3.1.0'
        espressoContrib = 'androidx.test.espresso:espresso-contrib:3.1.0'
        espressoIdlingResource = 'androidx.test.espresso.idling:idling-concurrent:3.1.0'

        ktxCore = 'androidx.core:core-ktx:1.1.0'
        kotlin = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        // Artifactory publishing params
        libProps = new Properties()
        bintrayProps = new Properties()
        localProps = new Properties()

        libProps.load(new FileInputStream(file("libraryVersion.properties")))

        groupId = libProps['groupId']
        artifactoryUrl = libProps['artifactoryUrl']

        bintrayUser = ''
        bintrayApiKey = ''
        def bintrayFile = file("bintray.properties")
        if (bintrayFile.exists()) {
            bintrayProps.load(new FileInputStream(bintrayFile))
            bintrayUser = bintrayProps['user']
            bintrayApiKey = bintrayProps['apiKey']
        }

        // publish properties can be set from the command line or local.properties.
        // Multiple repository setup can only done in the local.properties file with the following
        // mapping:

        // repositories=[{
        // "name": "myRepo",
        // "url": "myUrl",
        // "credentials": "username": "user", "password": "hi"
        // }]

        publishRepositories = []
        def localPropsFile = file("local.properties")
        
        if (localPropsFile.exists()) {
            localProps.load(new FileInputStream(localPropsFile))

            def slurper = new JsonSlurper()
            def repos = localProps['repositories']
            if (repos != null) publishRepositories = slurper.parseText(repos)
        }

        def pullProperty = { String name, Properties prop ->
            return project.findProperty(name) ?: prop[name] ?: ""
        }

        publishUrl = pullProperty('publishUrl', localProps)
        publishRepoName = pullProperty('publishRepoName', localProps)
        publishUserName = pullProperty('publishUserName', localProps)
        publishPassword = pullProperty('publishPassword', localProps)
    }
}

// Plugin used to upload authenticated files to BinTray through Gradle
plugins {
    id "com.jfrog.bintray" version "1.8.4"
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
